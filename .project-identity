{
  "projectName": "T√™n d·ª± √°n, c·∫ßn ƒëi·ªÅu ch·ªânh khi setup project",
  "projectType": "template|android|ios|flutter|react-native|web|desktop",
  "projectStage": "setup|brainstorm|development|production",
  "mainLanguages": [],
  "mainFrameworks": [],
  "keyTechnologies": [],
  "keyFeatures": [],
  "projectLifecycle": {
    "stage1_brainstorm": {
      "description": "Giai ƒëo·∫°n brainstorm v√† l√™n √Ω t∆∞·ªüng",
      "workflowRules": [
        ".cursor/rules/brainstorm-workflow.mdc",
        ".cursor/rules/brainstorm-detailed-workflow.mdc"
      ],
      "requiredOutputs": [
        "Brainstorm_[ProjectName].md",
        "Updated .project-identity with basic info"
      ],
      "nextStage": "stage2_setup"
    },
    "stage2_setup": {
      "description": "Giai ƒëo·∫°n setup d·ª± √°n v√† c·∫•u tr√∫c",
      "workflowRules": [
        ".cursor/rules/project-creation-workflow.mdc",
        ".cursor/rules/planning-workflow.mdc"
      ],
      "requiredOutputs": [
        "Project structure created",
        "Technical stack selected",
        "Development environment ready"
      ],
      "nextStage": "stage3_development"
    },
    "stage3_development": {
      "description": "Giai ƒëo·∫°n ph√°t tri·ªÉn ch√≠nh",
      "workflowRules": "Based on projectType",
      "platformSpecificRules": {
        "base": [
          ".cursor/rules/design-to-prompt.mdc"
        ],
        "android": [
          ".cursor/rules/android-workflow.mdc",
          ".cursor/rules/android-code-deduplication.mdc",
          "docs/TSDDR-2.0-Guide.md"
        ],
        "ios": [
          ".cursor/rules/ios-workflow.mdc",
          "docs/TSDDR-2.0-Guide.md"
        ],
        "flutter": [
          ".cursor/rules/mobile-utility-workflow.mdc",
          "docs/TSDDR-2.0-Guide.md"
        ],
        "web": [
          ".cursor/rules/frontend-rules.mdc",
          ".cursor/rules/backend-rules-optimized.mdc"
        ]
      }
    }
  },
  "coreRules": {
    "description": [
      "Load c√°c quy t·∫Øc t·ª´ .cursor/rules/ d·ª±a tr√™n project type",
      "Ki·ªÉm tra memories c√≥ li√™n quan",
      "√Åp d·ª•ng workflow rules ph√π h·ª£p v·ªõi stage hi·ªán t·∫°i"
    ],
    "always_applied": [
      ".cursor/rules/project-identity-enforcement.mdc",
      ".cursor/rules/base-rules.mdc",
      ".cursor/rules/context7-auto-workflow.mdc",
      ".cursor/rules/development-rules.mdc",
      ".cursor/rules/markdown-unified-rules.mdc",
      ".cursor/rules/cursor-optimization-rules.mdc"
    ],
    "project_management": [
      ".cursor/rules/planning-workflow.mdc",
      ".cursor/rules/project-personality-generator.mdc",
      ".cursor/rules/resource-management.mdc"
    ],
    "quality_assurance": [
      "docs/TSDDR-2.0-Guide.md"
    ]
  },
  "integrations": {
    "telegram_notifications": {
      "description": "G·ª≠i th√¥ng b√°o ƒë·∫øn Telegram khi ho√†n th√†nh c√¥ng vi·ªác",
      "rule": ".cursor/rules/telegram-notification-workflow.mdc",
      "scripts": [
        "./scripts/notify.sh",
        "./scripts/telegram_notifier.py"
      ]
    },
    "ai_apis": {
      "rule": ".cursor/rules/api-integration-rules.mdc"
    },
    "mcp_tools": {
      "browser_debug": true
    }
  },
  "projectStructure": {
    "docs/project/": "Project documentation files (.md) - B·∫ÆT BU·ªòC ƒë·∫∑t t·∫•t c·∫£ file .md ·ªü ƒë√¢y",
    "docs/templates/": "Template files for project setup",
    "instructions/": "Project workflows and API documentation",
    "scripts/": "Automation scripts",
    "assets/": "Static resources",
    "design/": "Design files for analysis",
    ".cursor/rules/": "Development rules v√† workflows",
    ".trae/rules/": "Trae AI specific rules (alias to .cursor/rules)",
    "_backups/": "File backups (git-ignored)"
  },
  "projectIdentifiers": [
    ".project-identity",
    ".project-personality",
    "Instruction.md",
    "Brainstorm_*.md"
  ],
  "workflowEnforcement": {
    "mandatoryProjectIdentityCheck": {
      "description": "B·∫ÆT BU·ªòC ki·ªÉm tra .project-identity tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu b·∫•t k·ª≥ nhi·ªám v·ª• n√†o",
      "triggers": [
        "M·ªçi y√™u c·∫ßu t·ª´ ng∆∞·ªùi d√πng",
        "B·∫Øt ƒë·∫ßu session m·ªõi",
        "Th·ª±c hi·ªán b·∫•t k·ª≥ c√¥ng vi·ªác n√†o"
      ],
      "checkList": [
        "ƒê·ªçc v√† hi·ªÉu projectType, projectStage, mainLanguages, mainFrameworks",
        "X√°c ƒë·ªãnh workflow rules ph√π h·ª£p v·ªõi stage hi·ªán t·∫°i",
        "√Åp d·ª•ng platformSpecificRules n·∫øu c√≥",
        "Ki·ªÉm tra integrations v√† features ƒë∆∞·ª£c b·∫≠t",
        "Tu√¢n th·ªß coreRules.always_applied"
      ],
      "mandatoryActions": [
        "Load appropriate workflow rules t·ª´ .cursor/rules/",
        "Ki·ªÉm tra Context7 memories li√™n quan ƒë·∫øn project",
        "√Åp d·ª•ng project-specific constraints v√† requirements",
        "C·∫≠p nh·∫≠t projectStage n·∫øu c·∫ßn thi·∫øt"
      ]
    },
    "newProjectDetection": {
      "triggers": [
        "Empty project folder",
        "No Brainstorm_*.md files exist",
        "User mentions '√Ω t∆∞·ªüng m·ªõi' or 'd·ª± √°n m·ªõi'"
      ],
      "mandatoryFirstStep": "stage1_brainstorm",
      "blockingMessage": "üö´ D·ª∞ √ÅN M·ªöI PH√ÅT HI·ªÜN - B·∫ÆT BU·ªòC BRAINSTORM TR∆Ø·ªöC\n‚úÖ H√£y b·∫Øt ƒë·∫ßu: 'T√¥i mu·ªën brainstorm √Ω t∆∞·ªüng...'"
    },
    "stageProgression": {
      "cannot_skip_stages": true,
      "require_completion_confirmation": true,
      "auto_update_project_stage": true
    }
  },
  "features": {
    "ai_context_analysis": true,
    "voice_commands": true,
    "resource_management": true,
    "design_analysis": true,
    "auto_project_detection": true,
    "mcp_integration": true,
    "telegram_notifications": true
  }
}
