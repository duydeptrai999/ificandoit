# Task Creation Workflow - Automatic Task Expansion Engine

## Overview

Workflow n√†y t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi c√°c y√™u c·∫ßu t√≠nh nƒÉng c·∫•p cao th√†nh h·ªá th·ªëng task chi ti·∫øt, s·∫µn s√†ng tri·ªÉn khai trong `.kiro/specs/{project}/tasks.md`. ƒê∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ho·∫°t ƒë·ªông v·ªõi Claude, Cursor, Trae AI v√† Kiro system.

## Core Directive

Khi nh·∫≠n ƒë∆∞·ª£c B·∫§T K·ª≤ y√™u c·∫ßu t√≠nh nƒÉng n√†o, t·ª± ƒë·ªông t·∫°o ra T·∫§T C·∫¢ c√°c sub-features, tasks v√† technical specifications c·∫ßn thi·∫øt cho vi·ªác tri·ªÉn khai ho√†n ch·ªânh.

## Task Expansion Rules

### 1. Feature Auto-Expansion Pattern
V·ªõi b·∫•t k·ª≥ feature X n√†o, t·ª± ƒë·ªông bao g·ªìm:
- **Authentication & Authorization**: X√°c th·ª±c v√† ph√¢n quy·ªÅn
- **CRUD Operations**: Create, Read, Update, Delete
- **User Interface**: Forms, views, lists, components
- **API Endpoints & Data Models**: Backend APIs v√† data structures
- **Validation & Error Handling**: Input validation v√† x·ª≠ l√Ω l·ªói
- **Security & Privacy**: B·∫£o m·∫≠t v√† quy·ªÅn ri√™ng t∆∞
- **Settings & Preferences**: C√†i ƒë·∫∑t v√† t√πy ch·ªçn
- **Admin/Management**: Qu·∫£n tr·ªã v√† ƒëi·ªÅu h√†nh
- **Analytics & Logging**: Ph√¢n t√≠ch v√† ghi log
- **Related Features**: C√°c t√≠nh nƒÉng li√™n quan m√† user mong ƒë·ª£i

### 2. Task Hierarchy Template
```
Feature ‚Üí Sub-features ‚Üí Tasks ‚Üí Subtasks ‚Üí Technical Details
V√≠ d·ª•: 
Profile ‚Üí Edit Profile ‚Üí Avatar Upload ‚Üí [2.1 UI Design, 2.2 Validation Logic, 2.3 Storage Integration, 2.4 Testing]
M·ªói task ch√≠nh ph·∫£i c√≥ 4-6 subtasks theo pattern: UI ‚Üí Logic ‚Üí Integration ‚Üí Testing
```

### 3. Mandatory Inclusions
M·ªói feature PH·∫¢I t·∫°o tasks cho:
- **UI/UX**: T·∫•t c·∫£ screens, forms, components, states (loading/error/empty/success)
- **Backend**: APIs, validation, business logic, database operations
- **Security**: Authentication, authorization, data protection, audit logs
- **Quality**: Error handling, edge cases, performance, testing
- **Operations**: Deployment, monitoring, documentation

### 4. Detail Level Requirements
V·ªõi m·ªói task, ch·ªâ ƒë·ªãnh:
- **What**: M√¥ t·∫£ r√µ r√†ng v√† acceptance criteria
- **Subtasks**: 4-6 subtasks theo progressive complexity
- **UI**: Component specs, layouts, responsive behavior
- **API**: Endpoints, request/response formats, validation rules
- **Data**: Models, relationships, constraints
- **Logic**: Business rules, workflows, calculations
- **Errors**: T·∫•t c·∫£ possible failures v√† handling
- **Implementation Guide**: Code examples v√† technical specifications

### 5. Smart Context Awareness
- Th√≠ch ·ª©ng ƒë·ªô ph·ª©c t·∫°p v·ªõi target users (ng∆∞·ªùi cao tu·ªïi = UI l·ªõn h∆°n, flows ƒë∆°n gi·∫£n h∆°n)
- Bao g·ªìm platform-specific needs (mobile = offline mode, desktop = keyboard shortcuts)
- Xem x√©t industry requirements (healthcare = HIPAA, finance = PCI)
- Th√™m regional needs khi ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh (country-specific validations, languages)

## Kiro Integration Workflow

### Step 1: Project Context Detection
```
1. Ki·ªÉm tra current working directory
2. X√°c ƒë·ªãnh project name t·ª´ .kiro/specs/ structure
3. Validate existence c·ªßa .kiro/specs/{project}/
4. N·∫øu kh√¥ng t·ªìn t·∫°i ‚Üí t·∫°o project structure
5. Load existing requirements.md v√† design.md ƒë·ªÉ hi·ªÉu context
```

### Step 2: Feature Analysis & Expansion
```
1. Parse user input ƒë·ªÉ x√°c ƒë·ªãnh core feature
2. Apply Auto-Expansion Pattern
3. Generate comprehensive sub-features list
4. Cross-reference v·ªõi existing tasks ƒë·ªÉ tr√°nh duplication
5. Prioritize tasks based on dependencies v√† business value
```

### Step 3: Task Generation
```
1. Convert m·ªói sub-feature th√†nh detailed tasks v·ªõi subtask breakdown
2. Apply progressive complexity ordering (UI ‚Üí Logic ‚Üí Integration ‚Üí Testing)
3. Generate unique task IDs v·ªõi hierarchical numbering
4. Set dependencies v√† priorities
5. Create comprehensive acceptance criteria
6. Add technical depth v·ªõi implementation guides
```

### Step 4: Integration & Validation
```
1. Merge v·ªõi existing tasks.md
2. Validate task dependencies
3. Check for conflicts v·ªõi existing tasks
4. Update task numbering v√† references
5. Sync v·ªõi requirements.md v√† design.md
```

## Standard Task Format for Kiro

### Enhanced Professional Task Format (Based on new_task.md Template)
```markdown
### {Task Number}. {Task Name}
**Status**: ‚ùå Not Started
**Priority**: {CRITICAL|HIGH|MEDIUM|LOW}
**Estimated Time**: {X hours}
**Dependencies**: {List of dependent tasks or "None"}

**Description**: 
{Comprehensive 2-3 sentence description explaining what this task accomplishes, why it's important, and how it fits into the overall project}

**Key Files**: 
- `{PrimaryFile.kt}` ({modify|new})
- `{SecondaryFile.kt}` ({modify|new})
- `{AdditionalFile.kt}` ({modify|new})
- `{ViewModelFile.kt}` ({modify|new})

**Subtasks**:
- [ ] {ID}.1 {Specific UI/Component Implementation}
  - {Detailed description of UI component or screen to build}
  - {Specific UI elements, layouts, and interactions required}
  - {User experience considerations and accessibility requirements}
  - {Visual design specifications and responsive behavior}
  - _Requirements: {Specific UI outcome}_

- [ ] {ID}.2 {Business Logic and Data Processing}
  - {Detailed description of core functionality and business rules}
  - {Data processing, validation, and transformation logic}
  - {Integration with existing business logic and use cases}
  - {State management and data flow considerations}
  - _Requirements: {Specific functionality outcome}_

- [ ] {ID}.3 {Data Layer and Storage Integration}
  - {Database schema changes, entity modifications, or new models}
  - {Repository pattern implementation and data access logic}
  - {Data persistence, caching, and synchronization requirements}
  - {Migration scripts and data integrity considerations}
  - _Requirements: {Specific data outcome}_

- [ ] {ID}.4 {API and Service Integration}
  - {External API integrations, network calls, and service connections}
  - {Request/response handling and data mapping}
  - {Authentication, authorization, and security considerations}
  - {Error handling for network failures and service unavailability}
  - _Requirements: {Specific integration outcome}_

- [ ] {ID}.5 {Error Handling and Edge Cases}
  - {Comprehensive error scenarios and exception handling}
  - {Input validation, boundary conditions, and edge cases}
  - {User feedback for errors and recovery mechanisms}
  - {Logging, monitoring, and debugging considerations}
  - _Requirements: {Specific robustness outcome}_

- [ ] {ID}.6 {Testing and Quality Assurance}
  - {Unit testing for all components and business logic}
  - {Integration testing for data flow and API connections}
  - {UI testing for user interactions and accessibility}
  - {Performance testing and optimization verification}
  - _Requirements: {Specific quality outcome}_

**Implementation Guide**: `implementation-guides/{task-name-guide}.md`
```

### Critical Task Creation Standards

#### Mandatory Task Structure Requirements
1. **B·∫ÆT BU·ªòC** m·ªói task ph·∫£i c√≥ ƒë√∫ng format tr√™n v·ªõi t·∫•t c·∫£ c√°c sections
2. **B·∫ÆT BU·ªòC** Estimated Time ph·∫£i realistic (4-20 hours per task)
3. **B·∫ÆT BU·ªòC** Key Files ph·∫£i list ra t·∫•t c·∫£ files s·∫Ω ƒë∆∞·ª£c modify/create
4. **B·∫ÆT BU·ªòC** m·ªói subtask ph·∫£i c√≥ 4 bullet points chi ti·∫øt + Requirements line
5. **B·∫ÆT BU·ªòC** Description ph·∫£i explain business value v√† technical context
6. **B·∫ÆT BU·ªòC** Dependencies ph·∫£i accurate v√† reference ƒë√∫ng task numbers

#### Subtask Detail Requirements
- **Subtask 1 (UI)**: Ph·∫£i specify exact components, screens, layouts, interactions
- **Subtask 2 (Logic)**: Ph·∫£i detail business rules, algorithms, data processing
- **Subtask 3 (Data)**: Ph·∫£i specify database changes, models, repositories
- **Subtask 4 (API)**: Ph·∫£i detail external integrations, network handling
- **Subtask 5 (Errors)**: Ph·∫£i cover all error scenarios v√† user feedback
- **Subtask 6 (Testing)**: Ph·∫£i specify testing types v√† coverage requirements

#### Content Quality Standards
- M·ªói bullet point trong subtask ph·∫£i actionable v√† specific
- Tr√°nh generic descriptions, ph·∫£i c√≥ concrete technical details
- Include user experience considerations trong UI subtasks
- Specify exact file names v√† whether they're new or modified
- Requirements line ph·∫£i measurable v√† verifiable

### Phase Organization and Progress Tracking

#### Mandatory Project Structure
```markdown
# {Project Name} - Implementation Tasks

## üìä Progress Overview
**Phase 1 ({Phase Name})**: 0/{X} tasks completed (0%)
**Phase 2 ({Phase Name})**: 0/{Y} tasks completed (0%)
**Phase 3 ({Phase Name})**: 0/{Z} tasks completed (0%)
**Total Progress**: 0/{Total} tasks completed (0%)

## üéØ Project Context

**Current State**: {Current project status and completion percentage}
**Architecture**: {Architecture pattern being used}
**Tech Stack**: {Key technologies and frameworks}
**Main Issues**: {Current problems that need to be addressed}

**Key Files**:
- {Important File 1}: `{file/path/File1.kt}`
- {Important File 2}: `{file/path/File2.kt}`

---

## üö® PHASE 1: {PHASE NAME} (Start Here)

{Phase 1 tasks...}

---

## üöÄ PHASE 2: {PHASE NAME}

{Phase 2 tasks...}

---

## üé® PHASE 3: {PHASE NAME}

{Phase 3 tasks...}
```

#### Phase Organization Rules
1. **B·∫ÆT BU·ªòC** chia tasks th√†nh 3 phases v·ªõi priorities r√µ r√†ng:
   - **Phase 1**: CRITICAL/HIGH priority - Core functionality v√† UX fixes
   - **Phase 2**: MEDIUM priority - Enhanced features v√† integrations
   - **Phase 3**: LOW/NICE-TO-HAVE - Advanced features v√† optimizations

2. **B·∫ÆT BU·ªòC** m·ªói phase ph·∫£i c√≥:
   - Clear phase name v√† description
   - Appropriate emoji indicators (üö® for critical, üöÄ for enhanced, üé® for advanced)
   - Logical task ordering v·ªõi dependencies
   - Realistic task distribution (3-7 tasks per phase)

3. **B·∫ÆT BU·ªòC** Progress Overview ph·∫£i:
   - Show exact task counts per phase
   - Calculate accurate percentages
   - Update as tasks are completed
   - Provide clear project status visibility

#### Task Numbering and Dependencies
1. **B·∫ÆT BU·ªòC** s·ª≠ d·ª•ng sequential numbering: 1, 2, 3, 4, 5...
2. **B·∫ÆT BU·ªòC** dependencies ph·∫£i reference exact task numbers
3. **B·∫ÆT BU·ªòC** "None" cho tasks kh√¥ng c√≥ dependencies
4. **B·∫ÆT BU·ªòC** logical dependency flow (UI ‚Üí Logic ‚Üí Integration ‚Üí Testing)

#### Project Context Requirements
1. **B·∫ÆT BU·ªòC** Current State ph·∫£i accurate v√† informative
2. **B·∫ØT BU·ªòC** Architecture ph·∫£i specify pattern (Clean Architecture, MVVM, etc.)
3. **B·∫ÆT BU·ªòC** Tech Stack ph·∫£i list key technologies
4. **B·∫ÆT BU·ªòC** Main Issues ph·∫£i identify current problems
5. **B·∫ÆT BU·ªòC** Key Files ph·∫£i list most important files v·ªõi full paths

## Auto-Expansion Examples

### Input: "User Profile"
**Auto-Expands To:**

### 1. User Registration System
**Status**: ‚ùå Not Started | **Priority**: HIGH | **Time**: 12h | **Dependencies**: None

**Key Files**: `RegistrationScreen.kt` (new), `RegistrationViewModel.kt` (new), `UserRepository.kt` (modify)

**Subtasks**: UI Design, Form Validation, API Integration, Email Verification, Error Handling, Testing

---

### 2. Profile CRUD Operations  
**Status**: ‚ùå Not Started | **Priority**: HIGH | **Time**: 16h | **Dependencies**: 1

**Key Files**: `ProfileScreen.kt` (new), `EditProfileScreen.kt` (new), `ProfileViewModel.kt` (new)

**Subtasks**: Profile View UI, Edit Form, Data Validation, Real-time Updates, Conflict Resolution, Integration Testing

---

### 3. Avatar Upload & Management
**Status**: ‚ùå Not Started | **Priority**: MEDIUM | **Time**: 10h | **Dependencies**: 2

**Key Files**: `AvatarUploadScreen.kt` (new), `ImageCropScreen.kt` (new), `AvatarViewModel.kt` (new)

**Subtasks**: Upload UI, Image Processing, Storage Integration, Preview & Crop, Error Handling, Performance Testing

---

### Input: "Payment System"
**Auto-Expands To:**
- **Payment Method Management**
  - 1.1 Payment Methods UI
  - 1.2 Card Validation Logic
  - 1.3 Secure Storage Integration
  - 1.4 Payment Gateway Connection
  - 1.5 Error & Security Handling
  - 1.6 PCI Compliance Testing
- **Transaction Processing**
  - 2.1 Transaction Flow UI
  - 2.2 Payment Processing Logic
  - 2.3 Gateway Integration
  - 2.4 Status Tracking
  - 2.5 Failure Recovery
  - 2.6 Load Testing
- **Subscription Management**
  - 3.1 Subscription Plans UI
  - 3.2 Billing Cycle Logic
  - 3.3 Recurring Payment Integration
  - 3.4 Plan Upgrade/Downgrade
  - 3.5 Cancellation Handling
  - 3.6 Revenue Analytics

### Input: "Search Feature"
**Auto-Expands To:**
- **Basic Search Implementation**
  - 1.1 Search Bar UI Design
  - 1.2 Query Processing Logic
  - 1.3 Search API Integration
  - 1.4 Results Display
  - 1.5 No Results Handling
  - 1.6 Performance Testing
- **Advanced Filters**
  - 2.1 Filter UI Components
  - 2.2 Filter Logic Implementation
  - 2.3 Query Builder Integration
  - 2.4 Filter Persistence
  - 2.5 Complex Query Handling
  - 2.6 Filter Analytics
- **Auto-suggestions**
  - 3.1 Suggestion UI Component
  - 3.2 Autocomplete Logic
  - 3.3 Search History Integration
  - 3.4 Popular Queries
  - 3.5 Typo Correction
  - 3.6 Suggestion Performance

## Task Categories & Modules

### üèóÔ∏è Foundation Module
- Data models v√† database setup
- Core architecture components
- Base classes v√† utilities
- Configuration management

### üé® UI/UX Module
- Screen designs v√† layouts
- Component library
- Navigation flow
- Responsive design
- Accessibility features

### üîß Backend Module
- API endpoints
- Business logic
- Data validation
- Authentication/Authorization
- Background services

### üß™ Testing Module
- Unit tests
- Integration tests
- UI tests
- Performance tests
- Security tests

### üì± Platform Module
- Platform-specific implementations
- Native integrations
- Performance optimizations
- Platform guidelines compliance

### üîí Security Module
- Data encryption
- Secure communication
- Access controls
- Audit logging
- Compliance requirements

### üìä Analytics Module
- User behavior tracking
- Performance monitoring
- Error reporting
- Business metrics
- A/B testing

### üöÄ DevOps Module
- CI/CD pipeline
- Deployment automation
- Monitoring setup
- Backup strategies
- Disaster recovery

## Enhanced Quality Gates

### Professional Task Creation Standards
- **B·∫ÆT BU·ªòC** m·ªói task ph·∫£i c√≥ ƒë√∫ng 6 subtasks theo th·ª© t·ª±: UI‚ÜíLogic‚ÜíData‚ÜíAPI‚ÜíError‚ÜíTesting
- **B·∫ÆT BU·ªòC** m·ªói task ph·∫£i c√≥ √≠t nh·∫•t 10 acceptance criteria chi ti·∫øt v√† ƒëo l∆∞·ªùng ƒë∆∞·ª£c
- **B·∫ÆT BU·ªòC** m·ªói task ph·∫£i c√≥ 4 ph·∫ßn technical requirements: UI/UX, API, Data, Testing
- **B·∫ÆT BU·ªòC** m·ªói subtask ph·∫£i c√≥ m√¥ t·∫£ chi ti·∫øt v·ªÅ m·ª•c ti√™u c·ª• th·ªÉ
- **B·∫ÆT BU·ªòC** acceptance criteria ph·∫£i cover ƒë·∫ßy ƒë·ªß: functionality, performance, security, accessibility
- **B·∫ÆT BU·ªòC** technical requirements ph·∫£i m√¥ t·∫£ specifications m√† KH√îNG ch·ª©a implementation code
- **B·∫ÆT BU·ªòC** task description ph·∫£i bao g·ªìm business context v√† technical overview

### Content Quality Standards
- **B·∫ÆT BU·ªòC** m·ªói task ph·∫£i self-contained v√† actionable cho developer
- **B·∫ÆT BU·ªòC** subtasks ph·∫£i theo progressive complexity t·ª´ ƒë∆°n gi·∫£n ƒë·∫øn ph·ª©c t·∫°p
- **B·∫ÆT BU·ªòC** acceptance criteria ph·∫£i specific, measurable, achievable, relevant, time-bound
- **B·∫ÆT BU·ªòC** technical requirements ph·∫£i ƒë·ªß chi ti·∫øt ƒë·ªÉ developer hi·ªÉu r√µ expectations
- **B·∫ÆT BU·ªòC** error handling v√† edge cases ph·∫£i ƒë∆∞·ª£c address explicitly
- **B·∫ÆT BU·ªòC** performance v√† security considerations ph·∫£i ƒë∆∞·ª£c include

### Integration & Consistency Validation
- **B·∫ÆT BU·ªòC** check dependencies v·ªõi existing tasks v√† avoid conflicts
- **B·∫ÆT BU·ªòC** validate task ordering v√† logical flow
- **B·∫ÆT BU·ªòC** ensure no duplicate functionality across tasks
- **B·∫ÆT BU·ªòC** maintain consistency v·ªõi project architecture v√† coding standards
- **B·∫ÆT BU·ªòC** verify completeness c·ªßa feature implementation across all tasks
- **B·∫ÆT BU·ªòC** ensure proper module organization v√† separation of concerns

## Execution Commands

### Automatic Task Creation
```
kiro:create-tasks [feature-description]
- T·ª± ƒë·ªông t·∫°o comprehensive task list
- Apply auto-expansion rules
- Generate Kiro-compliant format
- Integrate v·ªõi existing tasks
```

### Manual Task Enhancement
```
kiro:enhance-task [task-id]
- Expand existing task v·ªõi additional details
- Add missing acceptance criteria
- Update technical specifications
- Validate completeness
```

### Task Validation
```
kiro:validate-tasks
- Check task format compliance
- Validate dependencies
- Ensure completeness
- Generate quality report
```

## Integration v·ªõi IDE Systems

### Claude Integration
- S·ª≠ d·ª•ng conversation context ƒë·ªÉ hi·ªÉu feature requirements
- Generate tasks trong Claude conversation
- Export tasks to .kiro/specs/{project}/tasks.md
- Maintain task traceability

### Cursor Integration
- Integrate v·ªõi Cursor's codebase understanding
- Generate tasks based on existing code structure
- Suggest refactoring tasks
- Auto-update task status based on code changes

### Trae AI Integration
- Leverage Trae's project analysis capabilities
- Generate context-aware tasks
- Integrate v·ªõi Trae's planning workflows
- Use Trae's code intelligence for task estimation

## Critical Professional Task Creation Rules

### Core Creation Principles
1. **KH√îNG BAO GI·ªú** h·ªèi clarification - ƒë∆∞a ra reasonable assumptions d·ª±a tr√™n best practices
2. **LU√îN LU√îN** t·∫°o comprehensive, professional-grade tasks ngay c·∫£ t·ª´ minimal input
3. **B·∫ÆT BU·ªòC** m·ªói task ph·∫£i c√≥ ƒë√∫ng 6 subtasks theo th·ª© t·ª± chu·∫©n: UI‚ÜíLogic‚ÜíData‚ÜíAPI‚ÜíError‚ÜíTesting
4. **B·∫ÆT BU·ªòC** m·ªói task ph·∫£i c√≥ √≠t nh·∫•t 10 acceptance criteria chi ti·∫øt v√† measurable
5. **B·∫ÆT BU·ªòC** technical requirements ph·∫£i comprehensive nh∆∞ng KH√îNG ch·ª©a implementation code

### Quality & Completeness Standards
6. **B·∫ÆT BU·ªòC** include t·∫•t c·∫£ edge cases, error scenarios, v√† security considerations
7. **B·∫ÆT BU·ªòC** output ph·∫£i ƒë·ªß chi ti·∫øt ƒë·ªÉ developer c√≥ th·ªÉ b·∫Øt ƒë·∫ßu coding ngay l·∫≠p t·ª©c
8. **∆ØU TI√äN** professional completeness v√† actionable details h∆°n brevity
9. **B·∫ÆT BU·ªòC** m·ªói subtask ph·∫£i c√≥ clear, specific objective v√† deliverable
10. **B·∫ÆT BU·ªòC** acceptance criteria ph·∫£i cover functionality, performance, security, accessibility

### Integration & Consistency Requirements
11. **B·∫ÆT BU·ªòC** tu√¢n th·ªß Enhanced Professional Task Format standards
12. **B·∫ÆT BU·ªòC** integrate seamlessly v·ªõi existing project structure v√† architecture
13. **B·∫ÆT BU·ªòC** maintain logical task dependencies v√† progressive complexity ordering
14. **B·∫ÆT BU·ªòC** ensure no duplicate functionality v√† maintain separation of concerns
15. **B·∫ÆT BU·ªòC** verify completeness c·ªßa entire feature implementation across all generated tasks

## Professional Success Criteria

### Developer Readiness Standard
M·ªôt developer ph·∫£i c√≥ th·ªÉ b·∫Øt ƒë·∫ßu coding ngay l·∫≠p t·ª©c sau khi ƒë·ªçc task output, v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin v·ªÅ:
- **What to build**: Clear functional requirements v√† expected outcomes
- **How to build**: Technical specifications v√† implementation approach
- **How to validate**: Comprehensive acceptance criteria v√† testing requirements
- **How to integrate**: Dependencies, APIs, v√† integration points

### Quality Benchmarks
- **Completeness**: 100% coverage c·ªßa feature requirements across all tasks
- **Actionability**: M·ªói task v√† subtask c√≥ clear deliverables v√† success metrics
- **Professional Standard**: Tasks comparable v·ªõi enterprise-level project management
- **Technical Depth**: Sufficient detail ƒë·ªÉ avoid implementation ambiguity
- **Integration Ready**: Seamless fit v·ªõi existing codebase v√† architecture

## Example Usage

### Input
```
"T√¥i mu·ªën th√™m t√≠nh nƒÉng chat cho ·ª©ng d·ª•ng"
```

### Output
```markdown
## üí¨ CHAT SYSTEM - Comprehensive Implementation Tasks

### üèóÔ∏è MODULE 1: Chat Foundation

#### TASK-001: Chat Data Models & Database
**Status**: ‚ùå Not Started
**Priority**: High
**Dependencies**: None
**Module**: Chat Foundation

Create comprehensive chat data models supporting real-time messaging, media sharing, and group conversations.

**Subtasks:**
- **1.1 Database Schema Design**: Design Room entities v√† relationships
- **1.2 Data Access Layer**: Implement DAOs v·ªõi CRUD operations
- **1.3 Model Validation**: Add data validation v√† constraints
- **1.4 Migration Scripts**: Create database migration strategies
- **1.5 Encryption Integration**: Implement message encryption support
- **1.6 Testing Suite**: Unit tests cho data layer

**Acceptance Criteria:**
- [ ] Create ChatEntity.kt with Room annotations
- [ ] Create MessageEntity.kt with support for text, image, file, voice
- [ ] Create ChatParticipantEntity.kt for user management
- [ ] Create ChatDao.kt with CRUD operations
- [ ] Update HealthDatabase.kt to include chat entities
- [ ] Add message encryption support
- [ ] Add message status tracking (sent, delivered, read)
- [ ] Add typing indicators support
- [ ] Add message reactions support
- [ ] Add message threading support

**Technical Specifications:**
```kotlin
@Entity(tableName = "chats")
data class ChatEntity(
    @PrimaryKey val id: String,
    val name: String?,
    val type: ChatType, // DIRECT, GROUP
    val createdAt: Long,
    val updatedAt: Long,
    val lastMessageId: String?,
    val isArchived: Boolean = false,
    val isMuted: Boolean = false
)

@Entity(tableName = "messages")
data class MessageEntity(
    @PrimaryKey val id: String,
    val chatId: String,
    val senderId: String,
    val content: String,
    val messageType: MessageType, // TEXT, IMAGE, FILE, VOICE
    val timestamp: Long,
    val status: MessageStatus, // SENDING, SENT, DELIVERED, READ
    val replyToMessageId: String?,
    val isEdited: Boolean = false,
    val isDeleted: Boolean = false,
    val encryptedContent: String?
)
```

**Implementation Guide:**
- Use Room database v·ªõi TypeConverters cho complex types
- Implement encryption using Android Keystore
- Follow Repository pattern cho data access
- Add proper indexing cho performance

**Requirements Reference:** Chat System Requirements

#### TASK-002: Real-time Messaging Engine
**Status**: ‚ùå Not Started
**Priority**: High
**Dependencies**: TASK-001
**Module**: Chat Foundation

**Subtasks:**
- **2.1 WebSocket Connection**: Implement real-time connection management
- **2.2 Message Queue**: Handle message sending/receiving queues
- **2.3 Offline Support**: Implement offline message storage
- **2.4 Sync Mechanism**: Handle message synchronization
- **2.5 Connection Recovery**: Auto-reconnection v√† error handling
- **2.6 Performance Testing**: Load testing cho concurrent users

[Continue v·ªõi detailed task breakdown...]
```

Workflow n√†y ƒë·∫£m b·∫£o r·∫±ng m·ªçi feature request ƒë·ªÅu ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh actionable, comprehensive task list s·∫µn s√†ng cho implementation.

## üîß Implementation Notes

- Always validate task completeness before marking as done
- Maintain consistent naming conventions across all tasks
- Ensure proper dependency tracking and resolution
- Regular progress reviews and timeline adjustments
- Quality gates at each phase completion
- Documentation updates with each task completion

## üö® Enforcement Rules

### B·∫ÆT BU·ªòC - Mandatory Compliance

1. **Format**: Tasks MUST follow compact format (Status | Priority | Time | Dependencies)
2. **Time**: 4-20 hours per task
3. **Files**: List key files with modification status
4. **Phases**: 3 phases with emoji indicators (üö®üöÄüé®)
5. **Dependencies**: Reference by task number
6. **Subtasks**: 6 core subtasks minimum
7. **Vietnamese**: Required sections in Vietnamese
8. **Structure**: Project overview + phases + tasks

### Quality Checklist

- [ ] 3 phases with 3-7 tasks each
- [ ] Realistic time estimates
- [ ] Clear dependencies
- [ ] Key files specified
- [ ] Vietnamese compliance

### Non-Compliance

- Incomplete tasks ‚Üí reject and recreate
- Wrong format ‚Üí immediate correction
- Missing details ‚Üí expand following workflow